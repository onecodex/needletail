---
name: CI
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build-wheels:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            architecture: arm64
            python-version: 3.12.6
            runner: macos-14
          - os: ubuntu-latest
            architecture: x64
            python-version: 3.12.6
            runner: ubuntu-latest
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@master

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # Setup Python for the selected version
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}

      - name: Install Python headers (Ubuntu)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install python3-dev python3-pip python3-venv

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install python3

      # Install Rust toolchain
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install maturin
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install maturin
          pip show maturin

      - name: Add library to venv
        run: |
          . venv/bin/activate
          maturin develop --features=python


      - name: Build wheels
        id: build_wheels
        run: |
          . venv/bin/activate
          maturin build --features=python --release --strip --manylinux=off
          # Use glob to capture the wheel file path
          echo "::set-output name=wheel_path::$(ls target/wheels/*.whl)"
        shell: bash

      - name: Upload wheel to GitHub release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.build_wheels.outputs.wheel_path }}
          asset_name: ${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.architecture }}.whl
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  finalize-release:
    needs: build-wheels
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Publish GitHub release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          token: ${{ secrets.GITHUB_TOKEN }}
