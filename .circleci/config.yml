version: 2.1

executors:
  needletail:
    machine:
      image: ubuntu-1604:201903-01

commands:
  checkout_and_setup:
    description: "Checkout code and set up rust"
    steps:
      - checkout
      - restore_cache:
          name: restore rust install
          keys:
            - rust-stable
      - run:
          name: set up rust nightly
          command: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path --default-toolchain stable
            echo 'export PATH=$HOME/.cargo/bin:$PATH' >> $BASH_ENV
            source $HOME/.cargo/env
            rustup show
      - save_cache:
          name: cache rust install
          paths:
            - ~/.rustup/
            - ~/.cargo/
          key: rust-stable
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - run:
          name: Calculate dependencies
          command: cargo generate-lockfile
      - restore_cache:
          name: restore project build artifacts
          keys:
            - v4-cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Build all targets
          command: cargo build --all --all-targets --all-features
      - save_cache:
          name: save project build artifacts
          paths:
            - ~/.cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: v4-cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}

jobs:
  build:
    executor: needletail
    steps:
      - checkout_and_setup
  test:
    executor: needletail
    steps:
      - checkout_and_setup
      - run:
          name: Run all tests
          command: cargo test --all --all-features
      - run:
          name: Run slow tests
          command: cargo test -- --ignored
  test-without-default-features:
    executor: needletail
    steps:
      - checkout_and_setup
      - run:
          name: Run all tests (without default features)
          command: cargo test --all --no-default-features
      - run:
          name: Run slow tests (without default features)
          command: cargo test --no-default-features -- --ignored
  build-on-wasm-target:
    executor: needletail
    steps:
      - checkout_and_setup
      - run:
          name: Build on wasm32-unknown-unknown
          command: |
            rustup target add wasm32-unknown-unknown
            cargo build --all --no-default-features --target wasm32-unknown-unknown
  lint:
    executor: needletail
    steps:
      - checkout_and_setup
      - run:
          name: Format
          command: |
            rustup component add rustfmt
            cargo fmt --all -- --check
      - run:
          name: Clippy
          command: |
            rustup component add clippy
            cargo clippy --all-features -- -D warnings
  coverage:
    executor: needletail
    steps:
      - checkout_and_setup
      - restore_cache:
          keys:
            - cargo-tarpaulin-0.8.6
      - run:
          name: install cargo tarpaulin
          command: cargo install cargo-tarpaulin --version 0.8.6 || echo "cargo-tarpaulin already installed"
          environment:
            RUSTFLAGS: --cfg procmacro2_semver_exempt
      - save_cache:
          paths:
            - ~/.cargo/bin/cargo-tarpaulin
          key: cargo-tarpaulin-0.8.6
      - run:
          name: Generate coverage report
          command: cargo tarpaulin --out Xml --all --all-features -t 600
          environment:
            LZMA_API_STATIC: 1
      - run:
          name: Export coverage to codecov
          command: bash <(curl -s https://codecov.io/bash) || echo "Failed to upload coverage"
  bench:
    # TODO: probably need to do something useful here (use critcmp?) before turning this on
    executor: needletail
    steps:
      - checkout_and_setup
      - run:
          name: Run benchmarks
          command: |
            cargo bench
  fuzz:
    # TODO: need to figure out how to install nightly here and probably cache the cargo-fuzz binary
    executor: needletail
    steps:
      - checkout_and_setup
      - run:
          name: Run fuzz for 3 minutes each
          command: |
            cargo +nightly install cargo-fuzz
            cargo +nightly fuzz run parse_fasta -- -max_total_time=180
            cargo +nightly fuzz run parse_fastq -- -max_total_time=180

workflows:
  version: 2
  ci-checks:
    jobs:
      - build
      - build-on-wasm-target:
          requires:
            - build
      - coverage:
          requires:
            - build
      - test:
          requires:
            - build
      - test-without-default-features:
          requires:
            - build
      - lint:
          requires:
            - build
